openapi: 3.0.0
info:
  title: Image Management API
  version: 1.0.0
  description: API for managing images and image-related operations
servers:
  - url: https://api.optipix.eu/v1

paths:
  /images:
    get:
      summary: Get all images
      description: Retrieves a list of all images with pagination
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: vehicleId
          in: query
          required: false
          description: Filter images by vehicle ID
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          required: false
          description: Filter images by status
          schema:
            type: string
            enum: [pending, processing, completed, failed]
      responses:
        '200':
          description: List of images retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: './schemas/image.yaml#/components/schemas/Image'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'

  /images/{imageId}:
    get:
      summary: Get image details
      description: Retrieves details of a specific image
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      responses:
        '200':
          description: Image details retrieved successfully
          content:
            application/json:
              schema:
                $ref: './schemas/image.yaml#/components/schemas/Image'
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound'
    delete:
      summary: Delete image
      description: Deletes a specific image
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      responses:
        '204':
          description: Image deleted successfully
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound'

  /images/upload:
    post:
      summary: Upload image
      description: Uploads a new image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                vehicleId:
                  type: string
                  format: uuid
                  example: "1e03a16e-8275-4285-92e4-c80c87085399"
                metadata:
                  type: object
                  properties:
                    description:
                      type: string
                    tags:
                      type: array
                      items:
                        type: string
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: './schemas/image.yaml#/components/schemas/Image'
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'

  /images/{imageId}/process:
    post:
      summary: Process image
      description: Initiates processing of an image
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/image.yaml#/components/schemas/ProcessImageRequest'
      responses:
        '200':
          description: Image processing initiated successfully
          content:
            application/json:
              schema:
                $ref: './schemas/image.yaml#/components/schemas/Image'
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound' 