openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users and user-related operations
servers:
  - url: http://localhost:3000/v1

paths:
  /clients/{clientId}/users:
    get:
      summary: Get all users for a client
      description: Retrieves a list of all users associated with a specific client
      parameters:
        - name: clientId
          in: path
          required: true
          description: The ID of the client
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/user.yaml#/components/schemas/User'
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'
        '403':
          $ref: './common/responses.yaml#/responses/Forbidden'
    post:
      summary: Create a new user for a client
      description: Creates a new user associated with a specific client
      parameters:
        - name: clientId
          in: path
          required: true
          description: The ID of the client
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/user.yaml#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: './schemas/user.yaml#/components/schemas/User'
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'
        '403':
          $ref: './common/responses.yaml#/responses/Forbidden'

  /users/{userId}:
    get:
      summary: Get user details
      description: Retrieves details of a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: './schemas/user.yaml#/components/schemas/User'
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound'
    put:
      summary: Update user details
      description: Updates the details of a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/user.yaml#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: './schemas/user.yaml#/components/schemas/User'
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound'
    delete:
      summary: Delete user
      description: Deletes a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      responses:
        '204':
          description: User deleted successfully
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound'

  /users/{userId}/change-password:
    post:
      summary: Change user password
      description: Changes the password for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/user.yaml#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound'

  /password/forgot:
    post:
      summary: Request password reset
      description: Initiates the password reset process by sending a reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/user.yaml#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent successfully
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'

  /password/reset:
    post:
      summary: Reset password
      description: Resets the password using a valid reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/user.yaml#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
        '400':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '401':
          $ref: './common/responses.yaml#/responses/Unauthorized' 